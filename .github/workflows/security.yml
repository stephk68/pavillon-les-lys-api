name: 🛡️ Security & Dependency Scan

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [main, master]
    paths:
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/security.yml'
  pull_request:
    paths:
      - 'package.json'
      - 'yarn.lock'
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20.x'

jobs:
  # =========================================
  # JOB 1: Dependency Audit
  # =========================================
  dependency-audit:
    name: 📦 Dependency Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Run yarn audit
        run: |
          echo "🔍 Running yarn audit..."
          yarn audit --level moderate --groups dependencies || true
          
          # Generate audit report
          yarn audit --json --level moderate > audit-report.json || true

      - name: 📊 Parse audit results
        run: |
          if [ -f audit-report.json ]; then
            echo "📊 Audit Summary:"
            cat audit-report.json | jq -r '.data.vulnerabilities | to_entries[] | "\(.key): \(.value)"' || echo "No vulnerabilities data"
            
            # Check for high/critical vulnerabilities
            HIGH_VULNS=$(cat audit-report.json | jq '[.data.vulnerabilities.high, .data.vulnerabilities.critical] | add // 0')
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "❌ Found $HIGH_VULNS high/critical vulnerabilities"
              exit 1
            else
              echo "✅ No high/critical vulnerabilities found"
            fi
          fi

      - name: 📤 Upload audit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-audit-report
          path: audit-report.json

  # =========================================
  # JOB 2: License Compliance
  # =========================================
  license-check:
    name: 📋 License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install license checker
        run: npm install -g license-checker

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Check licenses
        run: |
          echo "🔍 Checking package licenses..."
          license-checker --summary
          
          # Generate detailed license report
          license-checker --json > licenses.json
          
          # Check for forbidden licenses
          FORBIDDEN_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
          
          if license-checker --failOn "$FORBIDDEN_LICENSES" > /dev/null 2>&1; then
            echo "✅ No forbidden licenses found"
          else
            echo "❌ Found forbidden licenses"
            license-checker --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense"
          fi

      - name: 📤 Upload license report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: license-report
          path: licenses.json

  # =========================================
  # JOB 3: OWASP Dependency Check
  # =========================================
  owasp-check:
    name: 🛡️ OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Pavillon Les Lys API'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nodeAuditSkipDevDependencies

      - name: 📤 Upload OWASP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-dependency-check-report
          path: reports/

  # =========================================
  # JOB 4: Container Security Scan
  # =========================================
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: pavillon-les-lys:security-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pavillon-les-lys:security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Scan with Grype
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: 'pavillon-les-lys:security-test'
          fail-build: false

      - name: 📤 Upload Grype results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: grype-security-report
          path: ${{ steps.scan.outputs.sarif }}

  # =========================================
  # JOB 5: Code Security Analysis
  # =========================================
  code-security:
    name: 🔒 Code Security Analysis
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: typescript, javascript

      - name: 🔨 Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # =========================================
  # JOB 6: Secret Scanning
  # =========================================
  secret-scan:
    name: 🔑 Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 Scan with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =========================================
  # JOB 7: Generate Security Report
  # =========================================
  security-report:
    name: 📊 Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, owasp-check, container-security, code-security, secret-scan]
    if: always()

    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3

      - name: 📊 Generate consolidated report
        run: |
          echo "# 🛡️ Security Scan Report" > SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "**Scan Date:** $(date)" >> SECURITY_REPORT.md
          echo "**Repository:** ${{ github.repository }}" >> SECURITY_REPORT.md
          echo "**Branch:** ${{ github.ref_name }}" >> SECURITY_REPORT.md
          echo "**Commit:** ${{ github.sha }}" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          echo "## 📋 Scan Results Summary" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "| Component | Status |" >> SECURITY_REPORT.md
          echo "|-----------|--------|" >> SECURITY_REPORT.md
          echo "| Dependency Audit | ${{ needs.dependency-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_REPORT.md
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_REPORT.md
          echo "| OWASP Check | ${{ needs.owasp-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_REPORT.md
          echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_REPORT.md
          echo "| Code Security | ${{ needs.code-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_REPORT.md
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          echo "## 🔗 Detailed Reports" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "- [Dependency Audit Report](dependency-audit-report/audit-report.json)" >> SECURITY_REPORT.md
          echo "- [License Report](license-report/licenses.json)" >> SECURITY_REPORT.md
          echo "- [OWASP Dependency Check](owasp-dependency-check-report/)" >> SECURITY_REPORT.md
          echo "- [Container Security Report](grype-security-report/)" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          echo "## 🎯 Recommendations" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "1. **Regular Updates**: Keep dependencies up to date" >> SECURITY_REPORT.md
          echo "2. **Security Monitoring**: Monitor for new vulnerabilities" >> SECURITY_REPORT.md
          echo "3. **Access Controls**: Review and rotate secrets regularly" >> SECURITY_REPORT.md
          echo "4. **Container Security**: Keep base images updated" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          echo "---" >> SECURITY_REPORT.md
          echo "*Generated by GitHub Actions Security Workflow*" >> SECURITY_REPORT.md

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-security-report
          path: SECURITY_REPORT.md

      - name: 💬 Comment on PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('SECURITY_REPORT.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🛡️ Security Scan Results\n\n${report}`
            });

  # =========================================
  # JOB 8: Security Notifications
  # =========================================
  notify-security:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, owasp-check, container-security, code-security, secret-scan]
    if: always() && (contains(needs.*.result, 'failure') || github.event_name == 'schedule')

    steps:
      - name: 💬 Slack security alert
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 Security Alert: Pavillon Les Lys API",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Failed Checks",
                      "value": "${{ join(needs.*.result, ', ') }}",
                      "short": false
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Details",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email security notification
        if: contains(needs.*.result, 'failure')
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🚨 Security Alert: Pavillon Les Lys API"
          to: ${{ secrets.SECURITY_NOTIFICATION_EMAIL }}
          from: "GitHub Actions Security <security@pavillon-les-lys.fr>"
          body: |
            Security vulnerabilities detected in Pavillon Les Lys API
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Failed security checks:
            - Dependency Audit: ${{ needs.dependency-audit.result }}
            - License Check: ${{ needs.license-check.result }}
            - OWASP Check: ${{ needs.owasp-check.result }}
            - Container Security: ${{ needs.container-security.result }}
            - Code Security: ${{ needs.code-security.result }}
            - Secret Scan: ${{ needs.secret-scan.result }}
            
            Please review and address these security issues immediately.
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
