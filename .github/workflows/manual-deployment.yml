name: 🔄 Manual Deployment & Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - deploy
          - rollback
          - restart
          - migrate
          - seed
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      rollback_version:
        description: 'Version to rollback to (required for rollback)'
        required: false
        type: string
      force:
        description: 'Force action (skip confirmations)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =========================================
  # JOB 1: Validate Input
  # =========================================
  validate:
    name: ✅ Validate Request
    runs-on: ubuntu-latest

    outputs:
      target-version: ${{ steps.version.outputs.version }}
      environment: ${{ github.event.inputs.environment }}
      action: ${{ github.event.inputs.action }}

    steps:
      - name: 📋 Display request details
        run: |
          echo "🎯 Deployment Request Details:"
          echo "================================"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Version: ${{ github.event.inputs.version || 'latest' }}"
          echo "Rollback Version: ${{ github.event.inputs.rollback_version || 'N/A' }}"
          echo "Force: ${{ github.event.inputs.force }}"
          echo "Requested by: ${{ github.actor }}"
          echo "================================"

      - name: 🔍 Validate rollback requirements
        if: github.event.inputs.action == 'rollback'
        run: |
          if [[ -z "${{ github.event.inputs.rollback_version }}" ]]; then
            echo "❌ Rollback version is required for rollback action"
            exit 1
          fi
          echo "✅ Rollback validation passed"

      - name: 🏷️ Determine target version
        id: version
        run: |
          if [[ "${{ github.event.inputs.action }}" == "rollback" ]]; then
            VERSION="${{ github.event.inputs.rollback_version }}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="latest"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🎯 Target version: $VERSION"

      - name: ⚠️ Production safety check
        if: github.event.inputs.environment == 'production' && github.event.inputs.force == 'false'
        run: |
          echo "⚠️ PRODUCTION DEPLOYMENT WARNING"
          echo "================================"
          echo "You are about to perform: ${{ github.event.inputs.action }}"
          echo "Environment: PRODUCTION"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo ""
          echo "This action will affect the live production environment!"
          echo "Make sure you have:"
          echo "✅ Tested in staging environment"
          echo "✅ Verified database migrations"
          echo "✅ Notified the team"
          echo "✅ Have a rollback plan ready"
          echo ""
          echo "Proceeding in 10 seconds... (Cancel now if not ready)"
          sleep 10

  # =========================================
  # JOB 2: Pre-deployment Health Check
  # =========================================
  health-check:
    name: 🏥 Pre-deployment Health Check
    runs-on: ubuntu-latest
    needs: validate
    if: contains(fromJson('["deploy", "rollback"]'), github.event.inputs.action)

    steps:
      - name: 🔍 Check current environment status
        run: |
          ENV="${{ needs.validate.outputs.environment }}"
          
          if [[ "$ENV" == "staging" ]]; then
            URL="https://api-staging.pavillon-les-lys.fr"
          else
            URL="https://api.pavillon-les-lys.fr"
          fi
          
          echo "🔍 Checking current status of $ENV environment..."
          
          # Check if API is responding
          if curl -f "$URL/health" > /dev/null 2>&1; then
            echo "✅ Environment is currently healthy"
            
            # Get current version info if possible
            CURRENT_VERSION=$(curl -s "$URL/health" | jq -r '.version // "unknown"' 2>/dev/null || echo "unknown")
            echo "📋 Current version: $CURRENT_VERSION"
          else
            echo "⚠️ Environment appears to be down or unhealthy"
            echo "This deployment might be fixing an outage"
          fi

  # =========================================
  # JOB 3: Execute Deployment Action
  # =========================================
  execute-action:
    name: 🚀 Execute ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: [validate, health-check]
    environment: 
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_SSH_PRIVATE_KEY || secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: 🎯 Set environment variables
        run: |
          ENV="${{ github.event.inputs.environment }}"
          if [[ "$ENV" == "staging" ]]; then
            echo "SSH_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.STAGING_USER }}" >> $GITHUB_ENV
            echo "APP_URL=https://api-staging.pavillon-les-lys.fr" >> $GITHUB_ENV
          else
            echo "SSH_HOST=${{ secrets.PRODUCTION_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.PRODUCTION_USER }}" >> $GITHUB_ENV
            echo "APP_URL=https://api.pavillon-les-lys.fr" >> $GITHUB_ENV
          fi

      # Deploy Action
      - name: 🚀 Deploy to ${{ github.event.inputs.environment }}
        if: github.event.inputs.action == 'deploy'
        run: |
          VERSION="${{ needs.validate.outputs.target-version }}"
          echo "🚀 Deploying version $VERSION to ${{ github.event.inputs.environment }}"
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            cd /opt/pavillon-les-lys-api
            
            echo "📋 Current status:"
            docker-compose ps
            
            echo "💾 Creating backup..."
            BACKUP_TAG="backup-\$(date +%Y%m%d-%H%M%S)"
            docker tag \$(docker-compose images -q api 2>/dev/null || echo "none") pavillon-les-lys:\$BACKUP_TAG 2>/dev/null || true
            
            echo "📥 Pulling new image..."
            if [[ "$VERSION" == "latest" ]]; then
              docker-compose pull api
            else
              sed -i "s|image: .*pavillon-les-lys.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION|" docker-compose.yml
              docker-compose pull api
            fi
            
            echo "🔄 Restarting services..."
            docker-compose up -d api
            
            echo "⏳ Waiting for service to be ready..."
            sleep 15
            
            echo "✅ Deployment completed"
          EOF

      # Rollback Action
      - name: 🔄 Rollback to ${{ github.event.inputs.rollback_version }}
        if: github.event.inputs.action == 'rollback'
        run: |
          ROLLBACK_VERSION="${{ github.event.inputs.rollback_version }}"
          echo "🔄 Rolling back to version $ROLLBACK_VERSION"
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            cd /opt/pavillon-les-lys-api
            
            echo "📋 Current status:"
            docker-compose ps
            
            echo "🔄 Rolling back to $ROLLBACK_VERSION..."
            sed -i "s|image: .*pavillon-les-lys.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$ROLLBACK_VERSION|" docker-compose.yml
            
            docker-compose pull api
            docker-compose up -d api
            
            echo "⏳ Waiting for service to be ready..."
            sleep 15
            
            echo "✅ Rollback completed"
          EOF

      # Restart Action
      - name: 🔄 Restart services
        if: github.event.inputs.action == 'restart'
        run: |
          echo "🔄 Restarting services in ${{ github.event.inputs.environment }}"
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            cd /opt/pavillon-les-lys-api
            
            echo "📋 Current status:"
            docker-compose ps
            
            echo "🔄 Restarting all services..."
            docker-compose restart
            
            echo "⏳ Waiting for services to be ready..."
            sleep 20
            
            echo "✅ Restart completed"
          EOF

      # Migrate Action
      - name: 🗄️ Run database migrations
        if: github.event.inputs.action == 'migrate'
        run: |
          echo "🗄️ Running database migrations in ${{ github.event.inputs.environment }}"
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            cd /opt/pavillon-les-lys-api
            
            echo "🗄️ Running Prisma migrations..."
            docker-compose exec -T api yarn prisma migrate deploy
            
            echo "🔄 Generating Prisma client..."
            docker-compose exec -T api yarn prisma generate
            
            echo "✅ Migrations completed"
          EOF

      # Seed Action
      - name: 🌱 Seed database
        if: github.event.inputs.action == 'seed'
        run: |
          echo "🌱 Seeding database in ${{ github.event.inputs.environment }}"
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e
            cd /opt/pavillon-les-lys-api
            
            echo "⚠️ Warning: This will seed the database with test data"
            echo "🌱 Running database seed..."
            docker-compose exec -T api yarn db:seed
            
            echo "✅ Database seeding completed"
          EOF

  # =========================================
  # JOB 4: Post-deployment Verification
  # =========================================
  verify:
    name: ✅ Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [validate, execute-action]
    if: contains(fromJson('["deploy", "rollback", "restart"]'), github.event.inputs.action)

    steps:
      - name: 🏥 Health check
        run: |
          ENV="${{ github.event.inputs.environment }}"
          
          if [[ "$ENV" == "staging" ]]; then
            URL="https://api-staging.pavillon-les-lys.fr"
          else
            URL="https://api.pavillon-les-lys.fr"
          fi
          
          echo "🏥 Running health checks..."
          
          # Wait a bit for the service to fully start
          sleep 30
          
          # Check health endpoint
          if curl -f "$URL/health"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi
          
          # Check authentication endpoint
          if curl -f "$URL/auth/login" -X POST -H "Content-Type: application/json" -d '{}' | grep -q "email"; then
            echo "✅ Authentication endpoint responding"
          else
            echo "⚠️ Authentication endpoint may have issues"
          fi

      - name: 📊 Service status
        run: |
          echo "📊 Final service status:"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Version: ${{ needs.validate.outputs.target-version }}"
          echo "Status: ✅ Completed successfully"

  # =========================================
  # JOB 5: Notifications
  # =========================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [validate, execute-action, verify]
    if: always()

    steps:
      - name: 💬 Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ needs.verify.result == 'success' && '✅' || '❌' }} Manual Deployment: ${{ github.event.inputs.action }}",
              "attachments": [
                {
                  "color": "${{ needs.verify.result == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ github.event.inputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Action",
                      "value": "${{ github.event.inputs.action }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ needs.validate.outputs.target-version }}",
                      "short": true
                    },
                    {
                      "title": "Triggered by",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ needs.verify.result == 'success' && 'Success' || 'Failed' }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email notification
        if: github.event.inputs.environment == 'production'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "${{ needs.verify.result == 'success' && '✅' || '❌' }} Production ${{ github.event.inputs.action }} - Pavillon Les Lys API"
          to: ${{ secrets.PRODUCTION_NOTIFICATION_EMAIL }}
          from: "GitHub Actions <ops@pavillon-les-lys.fr>"
          body: |
            Manual deployment action completed for Pavillon Les Lys API
            
            Environment: ${{ github.event.inputs.environment }}
            Action: ${{ github.event.inputs.action }}
            Version: ${{ needs.validate.outputs.target-version }}
            Status: ${{ needs.verify.result == 'success' && 'Success' || 'Failed' }}
            Triggered by: ${{ github.actor }}
            
            Timestamp: ${{ github.event.head_commit.timestamp }}
            
            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
