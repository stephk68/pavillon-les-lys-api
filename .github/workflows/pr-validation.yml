name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [main, master, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20.x'

jobs:
  # =========================================
  # JOB 1: Basic Validation
  # =========================================
  validate:
    name: 📋 Basic Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for diff

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Check for lint issues
        run: yarn lint

      - name: 🎨 Check formatting
        run: yarn format --check

      - name: 🔨 Verify build
        run: yarn build

      - name: 📊 Check for large files
        run: |
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | \
          while read file; do
            echo "❌ Large file detected: $file ($(du -h "$file" | cut -f1))"
            exit 1
          done

  # =========================================
  # JOB 2: Database Schema Validation
  # =========================================
  schema-validation:
    name: 🗄️ Database Schema Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: pr_test
          POSTGRES_USER: pr_user
          POSTGRES_PASSWORD: pr_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🗄️ Validate Prisma schema
        run: yarn prisma validate

      - name: 🔄 Check migrations
        env:
          DATABASE_URL: postgresql://pr_user:pr_password@localhost:5432/pr_test
        run: |
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" > .env
          yarn prisma generate
          yarn prisma migrate deploy --preview-feature

      - name: 📊 Check for schema drift
        env:
          DATABASE_URL: postgresql://pr_user:pr_password@localhost:5432/pr_test
        run: yarn prisma db pull --print

  # =========================================
  # JOB 3: Security Review
  # =========================================
  security-review:
    name: 🔒 Security Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4

      - name: 🔍 Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🛡️ Check dependencies for vulnerabilities
        run: |
          npm audit --audit-level=moderate || echo "⚠️ Dependencies have vulnerabilities"

      - name: 📝 Check for hardcoded credentials
        run: |
          # Check for common patterns of hardcoded secrets
          if grep -r "password.*=" src/ --exclude-dir=node_modules | grep -v "PASSWORD_HASH"; then
            echo "❌ Potential hardcoded password found"
            exit 1
          fi
          
          if grep -r "api.*key" src/ --exclude-dir=node_modules | grep -v "API_KEY"; then
            echo "❌ Potential hardcoded API key found"
            exit 1
          fi

  # =========================================
  # JOB 4: Test Coverage Report
  # =========================================
  test-coverage:
    name: 📊 Test Coverage
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: coverage_test
          POSTGRES_USER: coverage_user
          POSTGRES_PASSWORD: coverage_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://coverage_user:coverage_password@localhost:5432/coverage_test
        run: |
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" > .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "JWT_EXPIRES_IN=24h" >> .env
          yarn prisma generate
          yarn prisma migrate deploy
          yarn db:seed

      - name: 🧪 Run tests with coverage
        env:
          DATABASE_URL: postgresql://coverage_user:coverage_password@localhost:5432/coverage_test
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 24h
        run: yarn test:unit:cov

      - name: 📊 Comment coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  # =========================================
  # JOB 5: Performance Check
  # =========================================
  performance:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 📏 Check bundle size
        run: |
          yarn build
          echo "📦 Bundle size analysis:"
          du -sh dist/
          
          # Check if bundle size increased significantly
          BUNDLE_SIZE=$(du -s dist/ | cut -f1)
          echo "Current bundle size: ${BUNDLE_SIZE}KB"
          
          if [ "$BUNDLE_SIZE" -gt 50000 ]; then
            echo "⚠️ Bundle size is quite large (${BUNDLE_SIZE}KB)"
          fi

      - name: 🔍 Analyze dependencies
        run: |
          echo "📊 Dependency analysis:"
          yarn list --depth=0 | head -20
          
          # Check for duplicate dependencies
          yarn list --pattern="*" | grep -E "├─|└─" | sort | uniq -d | head -10

  # =========================================
  # JOB 6: Code Quality Review
  # =========================================
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@master
        if: env.SONAR_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📊 Check complexity
        run: |
          # Simple complexity check using grep patterns
          echo "🔍 Checking for complex functions..."
          
          # Find long functions (>50 lines)
          find src -name "*.ts" -exec awk '/function|=>/ {start=NR} /^}$/ {if(NR-start>50) print FILENAME":"start"-"NR" Long function detected"}' {} \;
          
          # Find deep nesting (>4 levels)
          find src -name "*.ts" -exec grep -n "      if\|      for\|      while" {} \; | head -5

      - name: 🏷️ Add labels based on changes
        uses: actions/labeler@v4
        if: github.event.action == 'opened'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  # =========================================
  # JOB 7: Auto-merge check
  # =========================================
  auto-merge-check:
    name: 🤖 Auto-merge eligibility
    runs-on: ubuntu-latest
    needs: [validate, schema-validation, security-review, test-coverage, performance, code-quality]
    if: github.event.pull_request.draft == false

    steps:
      - name: ✅ Check if PR is ready for auto-merge
        run: |
          echo "🎉 All checks passed! PR is eligible for auto-merge."
          echo "✅ Validation: Success"
          echo "✅ Schema: Success"
          echo "✅ Security: Success"
          echo "✅ Coverage: Success"
          echo "✅ Performance: Success"
          echo "✅ Quality: Success"

      - name: 🏷️ Label as ready for merge
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ready-for-merge']
            })

  # =========================================
  # Final Status Check
  # =========================================
  pr-status:
    name: 📋 PR Status Summary
    runs-on: ubuntu-latest
    needs: [validate, schema-validation, security-review, test-coverage, performance, code-quality]
    if: always() && github.event.pull_request.draft == false

    steps:
      - name: 📊 Report overall status
        run: |
          echo "📋 Pull Request Validation Summary"
          echo "=================================="
          echo "Validation: ${{ needs.validate.result }}"
          echo "Schema Check: ${{ needs.schema-validation.result }}"
          echo "Security: ${{ needs.security-review.result }}"
          echo "Test Coverage: ${{ needs.test-coverage.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "=================================="
          
          if [[ "${{ needs.validate.result }}" == "success" && 
                "${{ needs.schema-validation.result }}" == "success" && 
                "${{ needs.security-review.result }}" == "success" && 
                "${{ needs.test-coverage.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "🎉 All checks passed! Ready for review."
          else
            echo "❌ Some checks failed. Please review and fix."
          fi
