name: 🚀 CI/CD Pipeline - Pavillon Les Lys API

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

# Define environment variables used across jobs
env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =========================================
  # JOB 1: Code Quality & Testing
  # =========================================
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: pavillon_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Run linter
        run: yarn lint

      - name: 🎨 Check code formatting
        run: yarn format --check

      - name: 🔨 Build application
        run: yarn build

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/pavillon_test
        run: |
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" > .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "JWT_EXPIRES_IN=24h" >> .env
          yarn prisma generate
          yarn prisma migrate deploy
          yarn db:seed

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/pavillon_test
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 24h
        run: yarn test:unit

      - name: 🔄 Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/pavillon_test
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 24h
        run: yarn test:integration

      - name: 🎯 Run e2e tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/pavillon_test
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 24h
        run: yarn test:e2e

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # =========================================
  # JOB 2: Security & Vulnerability Scan
  # =========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🛡️ Run security audit
        run: yarn audit --audit-level moderate

      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # =========================================
  # JOB 3: Build & Push Docker Image
  # =========================================
  build:
    name: 🐳 Build & Push Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =========================================
  # JOB 4: Deploy to Staging
  # =========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://api-staging.pavillon-les-lys.fr

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/pavillon-les-lys-api
            docker-compose pull api
            docker-compose up -d api
            docker system prune -f
          EOF

      - name: 🏥 Health check
        run: |
          sleep 30
          curl -f https://api-staging.pavillon-les-lys.fr/health || exit 1

  # =========================================
  # JOB 5: Deploy to Production
  # =========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: 
      name: production
      url: https://api.pavillon-les-lys.fr

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/pavillon-les-lys-api
            
            # Backup current version
            docker-compose down api
            docker tag $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep pavillon-les-lys | head -1) pavillon-les-lys:backup
            
            # Deploy new version
            docker-compose pull api
            docker-compose up -d api
            
            # Cleanup
            docker system prune -f
          EOF

      - name: 🏥 Health check
        run: |
          sleep 30
          curl -f https://api.pavillon-les-lys.fr/health || exit 1

      - name: 📊 Database migration (if needed)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/pavillon-les-lys-api
            docker-compose exec -T api yarn prisma migrate deploy
          EOF

  # =========================================
  # JOB 6: Notification & Monitoring
  # =========================================
  notify:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 💬 Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            🚀 Pavillon Les Lys API Deployment
            
            📋 Summary:
            • Branch: ${{ github.ref_name }}
            • Commit: ${{ github.sha }}
            • Author: ${{ github.actor }}
            
            📊 Results:
            • Tests: ${{ needs.test.result }}
            • Security: ${{ needs.security.result }}
            • Build: ${{ needs.build.result }}
            • Staging: ${{ needs.deploy-staging.result }}
            • Production: ${{ needs.deploy-production.result }}
            
            🔗 View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "❌ Pavillon Les Lys API - Deployment Failed"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "GitHub Actions <noreply@pavillon-les-lys.fr>"
          body: |
            Deployment failed for Pavillon Les Lys API
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
