name: Deploy ‚Ä¢ VPS via password (Production)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag d'image √† d√©ployer (ex: latest, 1.3, <sha court>)"
        required: true
        default: "latest"

concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  SERVICE: api
  IMAGE: kysaymeric/pavillon-les-lys
  DEPLOY_DIR: /home/sk_aymeric/pavillon-lys-api
  ENV_URL: http://51.254.33.99:3000 # remplace par ton domaine si tu en as un

jobs:
  deploy:
    runs-on: ubuntu-latest

    # ‚úÖ Badge "Deployed to production" + historique c√¥t√© GitHub
    environment:
      name: production
      url: ${{ env.ENV_URL }}

    permissions:
      contents: read
      deployments: write # n√©cessaire pour cr√©er/mettre √† jour un "Deployment" GitHub

    steps:
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const res = await github.request('POST /repos/{owner}/{repo}/deployments', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            core.setOutput('deployment_id', res.data.id);

      - name: SSH & deploy (password auth)
        id: ssh_deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          command_timeout: 30m
          script_stop: true
          script: |
            set -e
            SERVICE="${SERVICE}"
            DEPLOY_DIR="${DEPLOY_DIR}"

            cd "${DEPLOY_DIR}"

            # (facultatif) Login Docker Hub si image priv√©e
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || true
            fi

            PRE_IMAGE=$(docker ps --filter "name=^/pavillon-api$" --format "{{.Image}}" || true)

            # Met √† jour le tag dans .env (cr√©√© s'il n'existe pas)
            if [ -f .env ]; then
              sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${{ github.event.inputs.tag }}/" .env
            else
              echo "IMAGE_TAG=${{ github.event.inputs.tag }}" > .env
            fi

            # Pull + Up (compose V2, fallback V1, avec sudo si besoin)
            docker compose pull "${SERVICE}" \
            || docker-compose pull "${SERVICE}" \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker compose pull "${SERVICE}") \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker-compose pull "${SERVICE}")

            docker compose up -d "${SERVICE}" \
            || docker-compose up -d "${SERVICE}" \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker compose up -d "${SERVICE}") \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker-compose up -d "${SERVICE}")

            POST_IMAGE=$(docker ps --filter "name=^/pavillon-api$" --format "{{.Image}}" || true)
            DATE_UTC=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            echo "::notice title=Deployment::${SERVICE} d√©ploy√© avec le tag ${{ github.event.inputs.tag }}"

            # R√©cap en clair dans les logs
            echo "SERVER=${{ secrets.VPS_HOST }}"
            echo "SERVICE=${SERVICE}"
            echo "TAG=${{ github.event.inputs.tag }}"
            echo "PRE_IMAGE=${PRE_IMAGE}"
            echo "POST_IMAGE=${POST_IMAGE}"
            echo "DATE=${DATE_UTC}"

            # Nettoyage images obsol√®tes (optionnel)
            docker image prune -f \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker image prune -f)

      - name: Publish Job Summary
        run: |
          {
            echo "## üöÄ D√©ploiement ‚Äî Pavillon Les Lys (production)";
            echo "";
            echo "**Tag d√©ploy√© :** \`${{ github.event.inputs.tag }}\`";
            echo "**Service :** \`${{ env.SERVICE }}\`";
            echo "**Serveur :** \`${{ secrets.VPS_HOST }}\`";
            echo "**Dossier de d√©ploiement :** \`${{ env.DEPLOY_DIR }}\`";
            echo "**URL :** ${{ env.ENV_URL }}";
            echo "";
            echo "_Consulte les logs pour voir l'image avant/apr√®s et l'heure UTC._";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Set Deployment Status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.request('POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'success',
              environment: 'production',
              environment_url: process.env.ENV_URL,
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Set Deployment Status (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.request('POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'failure',
              environment: 'production',
              environment_url: process.env.ENV_URL,
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
