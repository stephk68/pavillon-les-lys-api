services:
  # ====================================
  # Database PostgreSQL
  # ====================================
  postgres:
    image: postgres:15-alpine
    container_name: pavillon-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pavillon_les_lys
      POSTGRES_USER: pavillon_user
      POSTGRES_PASSWORD: "Str0ngLysP@ssword="
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - pavillon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pavillon_user -d pavillon_les_lys"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====================================
  # Redis pour le cache et les sessions
  # ====================================
  redis:
    image: redis:7-alpine
    container_name: pavillon-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_pwd_2025
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - pavillon-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====================================
  # API Application
  # ====================================
  api:
    image: kysaymeric/pavillon-les-lys:1.1
    container_name: pavillon-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Base de données (mot de passe encodé)
      DATABASE_URL: "postgresql://pavillon_user:Str0ngLysP%40ssword%3D@postgres:5432/pavillon_les_lys"

      # Redis
      REDIS_URL: "redis://:redis_pwd_2025@redis:6379"

      # JWT
      JWT_SECRET: supersecretjwtkey_change_me
      JWT_EXPIRES_IN: 24h

      # Application
      NODE_ENV: production
      PORT: 3000

      # Email
      SMTP_HOST: smtp.example.com
      SMTP_PORT: 587
      SMTP_USER: smtp_user
      SMTP_PASS: smtp_password
      FROM_EMAIL: noreply@pavillon-les-lys.fr

    ports:
      - "3000:3000"
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    networks:
      - pavillon-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ====================================
# Volumes persistants
# ====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local

# ====================================
# Réseau interne
# ====================================
networks:
  pavillon-network:
    driver: bridge
