name: Build & Deploy Simple

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag de l'image (ex: latest, v1.0, main)"
        required: true
        default: "latest"
  push:
    branches: [master]

concurrency:
  group: simple-deploy
  cancel-in-progress: false

env:
  DOCKER_IMAGE: kysaymeric/pavillon-les-lys
  SERVICE_NAME: api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag || 'latest' }}
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            echo "🔄 Starting deployment..."

            # Variables
            TAG="${{ github.event.inputs.tag || 'latest' }}"
            PASS="${{ secrets.VPS_PASSWORD }}"

            # Aller dans le dossier du projet
            cd /home/sk_aymeric/pavillon-lys-api
            echo "📁 Working directory: $(pwd)"

            # Fonctions helper pour Docker
            run_docker() {
              if docker "$@" 2>/dev/null; then
                return 0
              elif echo "$PASS" | sudo -S docker "$@" 2>/dev/null; then
                return 0
              else
                echo "❌ Docker command failed: docker $*"
                return 1
              fi
            }

            run_compose() {
              if docker compose "$@" 2>/dev/null; then
                return 0
              elif docker-compose "$@" 2>/dev/null; then
                return 0
              elif echo "$PASS" | sudo -S docker compose "$@" 2>/dev/null; then
                return 0
              elif echo "$PASS" | sudo -S docker-compose "$@" 2>/dev/null; then
                return 0
              else
                echo "❌ Docker Compose command failed: $*"
                return 1
              fi
            }

            # Mettre à jour le tag d'image dans .env
            echo "🔧 Updating IMAGE_TAG to: $TAG"
            if [ -f .env ]; then
              if grep -q "^IMAGE_TAG=" .env; then
                sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=$TAG/" .env
                echo "✅ Updated existing IMAGE_TAG in .env"
              else
                echo "IMAGE_TAG=$TAG" >> .env
                echo "✅ Added IMAGE_TAG to existing .env"
              fi
            else
              echo "IMAGE_TAG=$TAG" > .env
              echo "✅ Created new .env with IMAGE_TAG"
            fi

            echo "📋 Current .env content:"
            cat .env
            echo "------------------------"

            # Pull de la nouvelle image
            echo "📥 Pulling new image: ${{ env.DOCKER_IMAGE }}:$TAG"
            if ! run_compose pull ${{ env.SERVICE_NAME }}; then
              echo "❌ Failed to pull image"
              exit 1
            fi
            echo "✅ Image pulled successfully"

            # Redémarrer le service
            echo "🔄 Restarting service: ${{ env.SERVICE_NAME }}"
            if ! run_compose up -d ${{ env.SERVICE_NAME }}; then
              echo "❌ Failed to restart service"
              exit 1
            fi
            echo "✅ Service restarted successfully"

            # Attendre un peu pour que le container démarre
            echo "⏳ Waiting for container to start..."
            sleep 5

            # Vérifier le statut
            echo "📊 Container status:"
            run_docker ps --filter "name=pavillon" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}\t{{.Ports}}"

            # Vérifier que le nouveau tag est bien utilisé
            CURRENT_IMAGE=$(run_docker ps --filter "name=pavillon-api" --format "{{.Image}}" | head -1)
            echo "🏷️ Current running image: $CURRENT_IMAGE"
            if [[ "$CURRENT_IMAGE" == *"$TAG"* ]]; then
              echo "✅ New tag is running correctly!"
            else
              echo "⚠️ Warning: Expected tag $TAG but got $CURRENT_IMAGE"
            fi

            # Nettoyer les images inutiles
            echo "🧹 Cleaning up old images..."
            run_docker image prune -f || true

            echo "✅ Deployment completed successfully!"

      - name: 📋 Job Summary
        run: |
          echo "## 🚀 Déploiement terminé" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** \`${{ env.SERVICE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ L'application est maintenant déployée sur le VPS!" >> $GITHUB_STEP_SUMMARY
