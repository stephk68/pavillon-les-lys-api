name: Build & Deploy Simple

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag de l'image (ex: latest, v1.0, main)"
        required: true
        default: "latest"
  push:
    branches: [main, master]

concurrency:
  group: simple-deploy
  cancel-in-progress: false

env:
  DOCKER_IMAGE: kysaymeric/pavillon-les-lys
  SERVICE_NAME: api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag || 'latest' }}
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            echo "🔄 Starting deployment..."

            # Aller dans le dossier du projet
            cd /home/sk_aymeric/pavillon-lys-api

            # Mettre à jour le tag d'image dans .env
            TAG="${{ github.event.inputs.tag || 'latest' }}"
            if [ -f .env ]; then
              sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=$TAG/" .env || echo "IMAGE_TAG=$TAG" >> .env
            else
              echo "IMAGE_TAG=$TAG" > .env
            fi

            echo "📋 Contenu du .env:"
            cat .env

            # Pull de la nouvelle image
            echo "📥 Pulling new image..."
            docker-compose pull ${{ env.SERVICE_NAME }} || sudo docker-compose pull ${{ env.SERVICE_NAME }}

            # Redémarrer le service
            echo "🔄 Restarting service..."
            docker-compose up -d ${{ env.SERVICE_NAME }} || sudo docker-compose up -d ${{ env.SERVICE_NAME }}

            # Vérifier le statut
            echo "✅ Deployment completed!"
            echo "📊 Container status:"
            docker ps --filter "name=pavillon" || sudo docker ps --filter "name=pavillon"

            # Nettoyer les images inutiles
            echo "🧹 Cleaning up..."
            docker image prune -f || sudo docker image prune -f || true

      - name: 📋 Job Summary
        run: |
          echo "## 🚀 Déploiement terminé" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tag || 'latest' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** \`${{ env.SERVICE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ L'application est maintenant déployée sur le VPS!" >> $GITHUB_STEP_SUMMARY
