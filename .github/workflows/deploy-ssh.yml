name: Deploy • VPS via password

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag d'image à déployer (ex: latest, 1.3, <sha court>)"
        required: true
        default: "latest"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH & deploy (password auth)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script_stop: true
          command_timeout: 30m
          script: |
            set -e

            cd /home/sk_aymeric/pavillon-lys-api   # <-- adapte ce chemin: dossier où est ton docker-compose.yml

            # (facultatif) login Docker Hub si image privée
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || true
            fi

            # Met à jour le tag dans .env (créé si absent)
            if [ -f .env ]; then
              sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${{ github.event.inputs.tag }}/" .env
            else
              echo "IMAGE_TAG=${{ github.event.inputs.tag }}" > .env
            fi

            # Détermine Docker Compose (plugin v2 ou binaire v1) et tente sans sudo, puis avec sudo si besoin
            # Pull
            docker compose pull api \
            || docker-compose pull api \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker compose pull api) \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker-compose pull api)

            # Up
            docker compose up -d api \
            || docker-compose up -d api \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker compose up -d api) \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker-compose up -d api)

            # Nettoyage images
            docker image prune -f \
            || (echo "${{ secrets.VPS_PASSWORD }}" | sudo -S docker image prune -f)
